// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using App.Core.Domain;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace App.Core.Models
{
    public partial class KitabiContext : IdentityDbContext<ApplicationUser>
    {
        public KitabiContext()
        {
        }

        public KitabiContext(DbContextOptions<KitabiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Book> Book { get; set; }
        public virtual DbSet<BookCategory> BookCategory { get; set; }
        public virtual DbSet<BookCategoryList> BookCategoryList { get; set; }
        public virtual DbSet<Deals> Deals { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Book>(entity =>
            {
                entity.HasIndex(e => e.UrlName, "IX_Book")
                    .IsUnique();

                entity.Property(e => e.AduioUrl).HasMaxLength(50);

                entity.Property(e => e.Author)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.BookPhoto)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.BooksToExchange).HasMaxLength(100);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsApproved)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.PdfUrl).HasMaxLength(50);

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Price).HasColumnType("smallmoney");

                entity.Property(e => e.UrlName)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<BookCategory>(entity =>
            {
                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BookCategoryList>(entity =>
            {
                entity.HasKey(e => new { e.BookId, e.CategoryId });

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookCategoryList)
                    .HasForeignKey(d => d.BookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookCategoryList_Book");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.BookCategoryList)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookCategoryList_BookCategory");
            });

            modelBuilder.Entity<Deals>(entity =>
            {
                entity.Property(e => e.BookName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BookPhoto)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.RequestUserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.Deals)
                    .HasForeignKey(d => d.BookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Deals_Book");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}